/* eslint-disable */
// @ts-nocheck

// Generated by peggy v. 2.0.1 (ts-pegjs plugin v. 3.0.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";


	 const types = {
      toolCall: "toolCall",
      mainPrg: "mainPrg",
      localSubPrg: "localSubPrg",
      localPrgCall: "localPrgCall",
      localPrgCallName: "localPrgCallName",
      globalPrgCall: "globalPrgCall",
      globalPrgCallName: "globalPrgCallName",
      localCycleCall: "localCycleCall",
      localCycleCallName: "localCycleCallName",
      globalCycleCall: "globalCycleCall",
      globalCycleCallName: "globalCycleCallName",
      controlBlock: "controlBlock",
      gotoBlocknumber: "gotoBlocknumber",
      gotoLabel: "gotoLabel",
      label: "label",
      multiline: "multiline",
      trash: "trash",
      skipBlock: "skipBlock",
      blockNumber: "blockNumber",
      blockNumberLabel: "blockNumberLabel",
      varDeclaration: "varDeclaration",
      variable:"variable"
  }
 class LightMatch {
    location;
    text;
    constructor(location, text) {
        this.location = location;
        this.text = text;
    }
}
  class Match {                                             // holds information about a relevant match
      type;                                                 // the type of the match e.g. prgCall
      name;
      location;                                             // the location of the match
      content;                                              // the syntax tree of this match
      text;
      isMatch = true;
      constructor(type, content, location, text,name) {
        this.type = type;
        this.content = content;
        this.location = location;
        this.text = text;
        this.name = name;
      }
    }


export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "PeggySyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, PeggySyntaxError.prototype);
    } else {
      (this as any).__proto__ = PeggySyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, PeggySyntaxError);
    }
  }

  format(sources: { grammarSource?: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].grammarSource === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: ParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { start: peg$parsestart };
  let peg$startRuleFunction: () => any = peg$parsestart;

  const peg$c0 = function(fileTree: any): any {return {fileTree:fileTree, numberableLinesUnsorted:numberableLinesUnsorted, mainPrg:mainPrg}};
  const peg$c1 = peg$otherExpectation("file");
  const peg$c2 = function(file: any): any { 
    mainPrg=file[2]?file[2]:null;
    return file;
  };
  const peg$c3 = peg$otherExpectation("subprogram");
  const peg$c4 = "%L";
  const peg$c5 = peg$literalExpectation("%L", false);
  const peg$c6 = function(title: any, content: any): any {                // each subprogram requires a title and a body
   return new Match(types.localSubPrg, content, location(), text(), title);
  };
  const peg$c7 = peg$otherExpectation("mainprogram");
  const peg$c8 = "%";
  const peg$c9 = peg$literalExpectation("%", false);
  const peg$c10 = function(definition: any, content: any): any {
    let name = null
    if(definition && definition[2]){
      name = definition[2]
    }
    return new Match(types.mainPrg, content, location(), text(), name)
  };
  const peg$c11 = peg$otherExpectation("body");
  const peg$c12 = peg$otherExpectation("comment");
  const peg$c13 = peg$otherExpectation("line_comment");
  const peg$c14 = function(): any {return text()};
  const peg$c15 = peg$otherExpectation("paren_comment");
  const peg$c16 = "(";
  const peg$c17 = peg$literalExpectation("(", false);
  const peg$c18 = /^[^)\r\n]/;
  const peg$c19 = peg$classExpectation([")", "\r", "\n"], true, false);
  const peg$c20 = ")";
  const peg$c21 = peg$literalExpectation(")", false);
  const peg$c22 = /^[^\r\n]/;
  const peg$c23 = peg$classExpectation(["\r", "\n"], true, false);
  const peg$c24 = peg$otherExpectation("semicolon_comment");
  const peg$c25 = ";";
  const peg$c26 = peg$literalExpectation(";", false);
  const peg$c27 = peg$otherExpectation("block_comment");
  const peg$c28 = "#COMMENT";
  const peg$c29 = peg$literalExpectation("#COMMENT", false);
  const peg$c30 = "BEGIN";
  const peg$c31 = peg$literalExpectation("BEGIN", false);
  const peg$c32 = "END";
  const peg$c33 = peg$literalExpectation("END", false);
  const peg$c34 = peg$anyExpectation();
  const peg$c35 = peg$otherExpectation("block");
  const peg$c36 = peg$otherExpectation("skipped_block");
  const peg$c37 = "/";
  const peg$c38 = peg$literalExpectation("/", false);
  const peg$c39 = "10";
  const peg$c40 = peg$literalExpectation("10", false);
  const peg$c41 = function(content: any): any {
      return new Match(types.skipBlock, content, location(), text() ,null);
  };
  const peg$c42 = peg$otherExpectation("block_body");
  const peg$c43 = function(content: any): any {                                          // default block, i.e., G01 X12 Y23
  	numberableLinesUnsorted.add(location().start.line);
  	return content;
  };
  const peg$c44 = peg$otherExpectation("control_block");
  const peg$c45 = "$";
  const peg$c46 = peg$literalExpectation("$", false);
  const peg$c47 = peg$otherExpectation("if_block");
  const peg$c48 = "$ENDIF";
  const peg$c49 = peg$literalExpectation("$ENDIF", false);
  const peg$c50 = "$IF";
  const peg$c51 = peg$literalExpectation("$IF", false);
  const peg$c52 = function(content: any): any {
    return new Match(types.controlBlock, content, location(), null, null);
  };
  const peg$c53 = "$ELSEIF";
  const peg$c54 = peg$literalExpectation("$ELSEIF", false);
  const peg$c55 = function(content: any): any {
  	return new Match(types.controlBlock, content, location(), null, null);
  };
  const peg$c56 = "$ELSE";
  const peg$c57 = peg$literalExpectation("$ELSE", false);
  const peg$c58 = peg$otherExpectation("gotoBlock");
  const peg$c59 = "$GOTO";
  const peg$c60 = peg$literalExpectation("$GOTO", false);
  const peg$c61 = "N";
  const peg$c62 = peg$literalExpectation("N", false);
  const peg$c63 = function(id: any): any {
      return new Match(types.gotoBlocknumber, null, location(), text(), id)
  };
  const peg$c64 = "[";
  const peg$c65 = peg$literalExpectation("[", false);
  const peg$c66 = /^[^\]]/;
  const peg$c67 = peg$classExpectation(["]"], true, false);
  const peg$c68 = "]";
  const peg$c69 = peg$literalExpectation("]", false);
  const peg$c70 = function(name: any): any {
    const id = name.toLowerCase()
    return new Match(types.gotoLabel, null, location(), text(), id)
  };
  const peg$c71 = peg$otherExpectation("plaintext_block");
  const peg$c72 = "#";
  const peg$c73 = peg$literalExpectation("#", false);
  const peg$c74 = peg$otherExpectation("var_block");
  const peg$c75 = "#VAR";
  const peg$c76 = peg$literalExpectation("#VAR", false);
  const peg$c77 = "#ENDVAR";
  const peg$c78 = peg$literalExpectation("#ENDVAR", false);
  const peg$c79 = function(content: any): any {
    numberableLinesUnsorted.add(location().start.line);
    numberableLinesUnsorted.add(location().end.line);
    return content;
  };
  const peg$c80 = function(id: any): any {
  return new Match(types.varDeclaration, null, location(), text(), id)
  };
  const peg$c81 = "V.";
  const peg$c82 = peg$literalExpectation("V.", false);
  const peg$c83 = "P";
  const peg$c84 = peg$literalExpectation("P", false);
  const peg$c85 = "S";
  const peg$c86 = peg$literalExpectation("S", false);
  const peg$c87 = "L";
  const peg$c88 = peg$literalExpectation("L", false);
  const peg$c89 = "CYC";
  const peg$c90 = peg$literalExpectation("CYC", false);
  const peg$c91 = ".";
  const peg$c92 = peg$literalExpectation(".", false);
  const peg$c93 = "=";
  const peg$c94 = peg$literalExpectation("=", false);
  const peg$c95 = peg$otherExpectation("default_block");
  const peg$c96 = peg$otherExpectation("multiline_default_block");
  const peg$c97 = "\\";
  const peg$c98 = peg$literalExpectation("\\", false);
  const peg$c99 = function(content: any): any {                                             // consume the last block, so the first not extended by "\"
  	return new Match(types.multiline, content, location(), null, null);
  };
  const peg$c100 = function(): any {return "trash: " + text()};
  const peg$c101 = function(): any {
    return new Match(types.variable, null, location(), text(), text());
  };
  const peg$c102 = peg$otherExpectation("command");
  const peg$c103 = /^[A-Z]/;
  const peg$c104 = peg$classExpectation([["A", "Z"]], false, false);
  const peg$c105 = peg$otherExpectation("n_command");
  const peg$c106 = ":";
  const peg$c107 = peg$literalExpectation(":", false);
  const peg$c108 = function(id: any, colon: any): any {
    const type = colon?types.blockNumberLabel:types.blockNumber
    return new Match(type, null, location(), text(), id)
  };
  const peg$c109 = peg$otherExpectation("t_command");
  const peg$c110 = "T";
  const peg$c111 = peg$literalExpectation("T", false);
  const peg$c112 = function(): any {
      return new Match(types.toolCall, null, location(), text(), null);
  };
  const peg$c113 = peg$otherExpectation("prg_call");
  const peg$c114 = peg$otherExpectation("local_subprg_call");
  const peg$c115 = "LL";
  const peg$c116 = peg$literalExpectation("LL", false);
  const peg$c117 = function(name: any): any {
  	const nameMatch = new Match(types.localPrgCallName, null, name.location, name.text, name.text)
  	return new Match(types.localPrgCall, [nameMatch] , location(), text(), name.text);
  };
  const peg$c118 = peg$otherExpectation("global_subprg_call");
  const peg$c119 = function(name: any): any {
      const nameMatch = new Match(types.globalPrgCallName, null, name.location, name.text, name.text)
  	return new Match(types.globalPrgCall, [nameMatch], location(), text(), name.text);
  };
  const peg$c120 = function(name: any): any {return new LightMatch(location(), name)};
  const peg$c121 = "\"";
  const peg$c122 = peg$literalExpectation("\"", false);
  const peg$c123 = function(name: any): any {return name};
  const peg$c124 = peg$otherExpectation("cycle_call");
  const peg$c125 = "CYCLE";
  const peg$c126 = peg$literalExpectation("CYCLE", false);
  const peg$c127 = "NAME";
  const peg$c128 = peg$literalExpectation("NAME", false);
  const peg$c129 = /^[^\]\r\n]/;
  const peg$c130 = peg$classExpectation(["]", "\r", "\n"], true, false);
  const peg$c131 = function(content: any): any {                    // brackets can contain a multline or a singleline
      const type = content[0]==="LL"?types.localCycleCall:types.globalCycleCall
      const nameType = content[0]==="LL"?types.localCycleCallName:types.globalCycleCallName
      let nameLM = content[6][1]                              // LightMatch of the cycle name
      const nameMatch = new Match(nameType, null, nameLM.location, nameLM.text, nameLM.text)
      content[6][1] = nameMatch                               // replace nameLightMatch with nameMatch  
      return new Match(type, content, location(), text(), nameLM.text);
    };
  const peg$c132 = peg$otherExpectation("squared_bracket_block");
  const peg$c133 = /^[^\]\r\n\\]/;
  const peg$c134 = peg$classExpectation(["]", "\r", "\n", "\\"], true, false);
  const peg$c135 = function(): any {                      // last line before "]"
  	return new Match(types.multiline, null, location(), null, null);
  };
  const peg$c136 = function(name: any): any {
    const id = name.toLowerCase()                             // labels are not case sensitive
    return new Match(types.label, null, location(), text(), id) 
  };
  const peg$c137 = peg$otherExpectation("grayspace");
  const peg$c138 = peg$otherExpectation("grayspaces");
  const peg$c139 = function(): any {
    return text()
  };
  const peg$c140 = peg$otherExpectation("grayline");
  const peg$c141 = peg$otherExpectation("whitespace");
  const peg$c142 = /^[\t ]/;
  const peg$c143 = peg$classExpectation(["\t", " "], false, false);
  const peg$c144 = peg$otherExpectation("whitespaces");
  const peg$c145 = peg$otherExpectation("linebreak");
  const peg$c146 = "\r\n";
  const peg$c147 = peg$literalExpectation("\r\n", false);
  const peg$c148 = "\r";
  const peg$c149 = peg$literalExpectation("\r", false);
  const peg$c150 = "\n";
  const peg$c151 = peg$literalExpectation("\n", false);
  const peg$c152 = peg$otherExpectation("non_linebreak");
  const peg$c153 = /^[^\n\r]/;
  const peg$c154 = peg$classExpectation(["\n", "\r"], true, false);
  const peg$c155 = peg$otherExpectation("integer");
  const peg$c156 = "-";
  const peg$c157 = peg$literalExpectation("-", false);
  const peg$c158 = peg$otherExpectation("non_neg_integer");
  const peg$c159 = peg$otherExpectation("number");
  const peg$c160 = peg$otherExpectation("name");
  const peg$c161 = /^[_a-zA-Z0-9.]/;
  const peg$c162 = peg$classExpectation(["_", ["a", "z"], ["A", "Z"], ["0", "9"], "."], false, false);
  const peg$c163 = peg$otherExpectation("digit");
  const peg$c164 = /^[0-9]/;
  const peg$c165 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c166 = peg$otherExpectation("non_delimiter");
  const peg$c167 = /^[^\t ();"[\],#$\n\r]/;
  const peg$c168 = peg$classExpectation(["\t", " ", "(", ")", ";", "\"", "[", "]", ",", "#", "$", "\n", "\r"], true, false);
  const peg$c169 = peg$otherExpectation("string");
  const peg$c170 = /^[^"]/;
  const peg$c171 = peg$classExpectation(["\""], true, false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): FileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: FileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: FileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): LiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: ClassParts, inverted: boolean, ignoreCase: boolean): ClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): AnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): EndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): OtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): FileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: FileRange) {
    return new PeggySyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: FileRange) {
    return new PeggySyntaxError(
      PeggySyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsestart(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsefile();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefile(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsegrayline();
    while (s3 as any !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parsegrayline();
    }
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsesubprogram();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsesubprogram();
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parsemainprogram();
        if (s4 as any === peg$FAILED) {
          s4 = null;
        }
        if (s4 as any !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsesubprogram();
          while (s6 as any !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsesubprogram();
          }
          if (s5 as any !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c2(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }

    return s0;
  }

  function peg$parsesubprogram(): any {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c4) {
      s1 = peg$c4;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsename();
        if (s4 as any !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsebody();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }

    return s0;
  }

  function peg$parsemainprogram(): any {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s2 = peg$c8;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parsewhitespaces();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsename();
        if (s5 as any === peg$FAILED) {
          s5 = null;
        }
        if (s5 as any !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 as any !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsebody();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }

    return s0;
  }

  function peg$parsebody(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = [];
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    s3 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c4) {
      s4 = peg$c4;
      peg$currPos += 2;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s4 as any !== peg$FAILED) {
      s5 = [];
      s6 = peg$parsewhitespace();
      if (s6 as any !== peg$FAILED) {
        while (s6 as any !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parsewhitespace();
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 as any !== peg$FAILED) {
        s6 = peg$parsename();
        if (s6 as any !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 as any === peg$FAILED) {
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s4 = peg$c8;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parsewhitespaces();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parsename();
          if (s6 as any === peg$FAILED) {
            s6 = null;
          }
          if (s6 as any !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s3 as any === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parsewhitespaces();
      if (s5 as any !== peg$FAILED) {
        s6 = peg$parselinebreak();
        if (s6 as any !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 as any !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 as any === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsewhitespaces();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parsecomment();
          if (s5 as any === peg$FAILED) {
            s5 = peg$parseblock();
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parsewhitespaces();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parselinebreak();
              if (s7 as any === peg$FAILED) {
                s7 = null;
              }
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s4 = peg$c4;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsewhitespace();
          if (s6 as any !== peg$FAILED) {
            while (s6 as any !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsewhitespace();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parsename();
            if (s6 as any !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 37) {
            s4 = peg$c8;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parsewhitespaces();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsename();
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$silentFails--;
        if (s3 as any === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 as any !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = peg$parsewhitespaces();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parselinebreak();
            if (s6 as any !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 as any !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 as any === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsewhitespaces();
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parsecomment();
              if (s5 as any === peg$FAILED) {
                s5 = peg$parseblock();
              }
              if (s5 as any !== peg$FAILED) {
                s6 = peg$parsewhitespaces();
                if (s6 as any !== peg$FAILED) {
                  s7 = peg$parselinebreak();
                  if (s7 as any === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 as any !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s3 as any !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }

    return s0;
  }

  function peg$parsecomment(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parseline_comment();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseblock_comment();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }

    return s0;
  }

  function peg$parseline_comment(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parseparen_comment();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesemicolon_comment();
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }

    return s0;
  }

  function peg$parseparen_comment(): any {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c16;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      if (peg$c18.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        if (peg$c18.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
      }
      if (s3 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c20;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s4 as any !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c16;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        if (peg$c22.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          if (peg$c22.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
        }
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }

    return s0;
  }

  function peg$parsesemicolon_comment(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c25;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c22.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        if (peg$c22.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }

    return s0;
  }

  function peg$parseblock_comment(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsegrayspaces();
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c28) {
        s2 = peg$c28;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhitespace();
        if (s4 as any !== peg$FAILED) {
          while (s4 as any !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewhitespace();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c30) {
            s4 = peg$c30;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s4 as any !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$currPos;
            peg$silentFails++;
            s8 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c28) {
              s9 = peg$c28;
              peg$currPos += 8;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
            if (s9 as any !== peg$FAILED) {
              s10 = [];
              s11 = peg$parsewhitespace();
              if (s11 as any !== peg$FAILED) {
                while (s11 as any !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$parsewhitespace();
                }
              } else {
                s10 = peg$FAILED;
              }
              if (s10 as any !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c32) {
                  s11 = peg$c32;
                  peg$currPos += 3;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c33); }
                }
                if (s11 as any !== peg$FAILED) {
                  s9 = [s9, s10, s11];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            peg$silentFails--;
            if (s8 as any === peg$FAILED) {
              s7 = undefined;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 as any !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s8 as any !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 as any !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c28) {
                s9 = peg$c28;
                peg$currPos += 8;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
              if (s9 as any !== peg$FAILED) {
                s10 = [];
                s11 = peg$parsewhitespace();
                if (s11 as any !== peg$FAILED) {
                  while (s11 as any !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parsewhitespace();
                  }
                } else {
                  s10 = peg$FAILED;
                }
                if (s10 as any !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c32) {
                    s11 = peg$c32;
                    peg$currPos += 3;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c33); }
                  }
                  if (s11 as any !== peg$FAILED) {
                    s9 = [s9, s10, s11];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              peg$silentFails--;
              if (s8 as any === peg$FAILED) {
                s7 = undefined;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 as any !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s8 as any !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c28) {
                s7 = peg$c28;
                peg$currPos += 8;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
              if (s7 as any !== peg$FAILED) {
                s8 = [];
                s9 = peg$parsewhitespace();
                if (s9 as any !== peg$FAILED) {
                  while (s9 as any !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parsewhitespace();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 as any !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c32) {
                    s9 = peg$c32;
                    peg$currPos += 3;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c33); }
                  }
                  if (s9 as any !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 as any !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    return s0;
  }

  function peg$parseblock(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsegrayspaces();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseskipped_block();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseblock_body();
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }

    return s0;
  }

  function peg$parseskipped_block(): any {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s2 = peg$c37;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c38); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parsedigit();
      if (s3 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c39) {
          s3 = peg$c39;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
      }
      if (s3 as any === peg$FAILED) {
        s3 = null;
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parsegrayspaces();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseblock_body();
          if (s5 as any !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c41(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parseblock_body(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsen_command();
    if (s2 as any === peg$FAILED) {
      s2 = null;
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parsecontrol_block();
      if (s3 as any === peg$FAILED) {
        s3 = peg$parseplaintext_block();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parsedefault_block();
        }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c43(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }

    return s0;
  }

  function peg$parsecontrol_block(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$parseif_block();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsegotoBlock();
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsegrayspaces();
        if (s1 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 36) {
            s2 = peg$c45;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c46); }
          }
          if (s2 as any !== peg$FAILED) {
            s3 = peg$parsetrash_line();
            if (s3 as any !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }

    return s0;
  }

  function peg$parseif_block(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseif_block_for_indentation();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseelseif_block();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseelseif_block();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseelse_block();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsegrayspaces();
          if (s4 as any !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c48) {
              s5 = peg$c48;
              peg$currPos += 6;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parsegrayspaces();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parselinebreak();
                if (s7 as any === peg$FAILED) {
                  s7 = null;
                }
                if (s7 as any !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }

    return s0;
  }

  function peg$parseif_block_for_indentation(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsegrayspaces();
    if (s2 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c50) {
        s3 = peg$c50;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseline_end();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseif_block_content();
          if (s5 as any !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c52(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseelseif_block(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsegrayspaces();
    if (s2 as any !== peg$FAILED) {
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c53) {
        s4 = peg$c53;
        peg$currPos += 7;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseline_end();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parseif_block_content();
          if (s6 as any !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c55(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseelse_block(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsegrayspaces();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c56) {
        s3 = peg$c56;
        peg$currPos += 5;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseline_end();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseif_block_content();
          if (s5 as any !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c55(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseif_block_content(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    s3 = peg$currPos;
    s4 = peg$parsegrayspaces();
    if (s4 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c53) {
        s5 = peg$c53;
        peg$currPos += 7;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s5 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c56) {
          s5 = peg$c56;
          peg$currPos += 5;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c57); }
        }
        if (s5 as any === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c48) {
            s5 = peg$c48;
            peg$currPos += 6;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
        }
      }
      if (s5 as any !== peg$FAILED) {
        s6 = peg$parsegrayspaces();
        if (s6 as any !== peg$FAILED) {
          s7 = peg$parselinebreak();
          if (s7 as any === peg$FAILED) {
            s7 = null;
          }
          if (s7 as any !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    peg$silentFails--;
    if (s3 as any === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parseblock();
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$currPos;
      s4 = peg$parsegrayspaces();
      if (s4 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c53) {
          s5 = peg$c53;
          peg$currPos += 7;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s5 as any === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c56) {
            s5 = peg$c56;
            peg$currPos += 5;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c57); }
          }
          if (s5 as any === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c48) {
              s5 = peg$c48;
              peg$currPos += 6;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
          }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parsegrayspaces();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parselinebreak();
            if (s7 as any === peg$FAILED) {
              s7 = null;
            }
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseblock();
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsegotoBlock(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsegap();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsegotoNCommand();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parsegotoLabel();
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }

    return s0;
  }

  function peg$parsegotoNCommand(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 78) {
      s1 = peg$c61;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsenon_neg_integer();
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c63(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegotoLabel(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$c66.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        if (peg$c66.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c68;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseplaintext_block(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsegrayspaces();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsevar_block();
      if (s2 as any === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s4 = peg$c72;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsenon_linebreak();
          while (s6 as any !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsenon_linebreak();
          }
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c71); }
    }

    return s0;
  }

  function peg$parsevar_block(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c75) {
      s2 = peg$c75;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsegrayline();
      if (s4 as any === peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseendvar_line();
        peg$silentFails--;
        if (s6 as any === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parsevar_dec();
          if (s6 as any === peg$FAILED) {
            s6 = peg$parsenon_linebreak();
          }
          if (s6 as any !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsegrayline();
        if (s4 as any === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseendvar_line();
          peg$silentFails--;
          if (s6 as any === peg$FAILED) {
            s5 = undefined;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parsevar_dec();
            if (s6 as any === peg$FAILED) {
              s6 = peg$parsenon_linebreak();
            }
            if (s6 as any !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parsegrayspaces();
        if (s4 as any !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c77) {
            s5 = peg$c77;
            peg$currPos += 7;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s5 as any !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c79(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }

    return s0;
  }

  function peg$parsevar_dec(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsevar_name();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseallocation();
      if (s3 as any === peg$FAILED) {
        s3 = null;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c80(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevar_name(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c81) {
      s2 = peg$c81;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }
    if (s2 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 80) {
        s3 = peg$c83;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s3 as any === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 83) {
          s3 = peg$c85;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
        if (s3 as any === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 76) {
            s3 = peg$c87;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          if (s3 as any === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c89) {
              s3 = peg$c89;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c90); }
            }
          }
        }
      }
      if (s3 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c91;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parsename();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parsevardec_index();
            if (s6 as any === peg$FAILED) {
              s6 = null;
            }
            if (s6 as any !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsevardec_index(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c91;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c92); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsename();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = [];
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c64;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseinteger();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c68;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s4 as any !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c64;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseinteger();
          if (s3 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c68;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c69); }
            }
            if (s4 as any !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseallocation(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsegap();
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c93;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsegap();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s5 = peg$c64;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = [];
            if (peg$c66.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            while (s7 as any !== peg$FAILED) {
              s6.push(s7);
              if (peg$c66.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
              }
            }
            if (s6 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s7 = peg$c68;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c69); }
              }
              if (s7 as any !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 as any === peg$FAILED) {
            s4 = peg$parsenumber();
            if (s4 as any === peg$FAILED) {
              s4 = peg$parsestring();
            }
          }
          if (s4 as any !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseendvar_line(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 7) === peg$c77) {
      s4 = peg$c77;
      peg$currPos += 7;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }
    peg$silentFails--;
    if (s4 as any === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 as any !== peg$FAILED) {
      s4 = peg$parsenon_linebreak();
      if (s4 as any !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 7) === peg$c77) {
        s4 = peg$c77;
        peg$currPos += 7;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      peg$silentFails--;
      if (s4 as any === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parsenon_linebreak();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c77) {
        s2 = peg$c77;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedefault_block(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parsemultiline_default_block();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsedefault_line();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }

    return s0;
  }

  function peg$parsemultiline_default_block(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsedefault_line();
    if (s3 as any !== peg$FAILED) {
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsedefault_line();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s3 = peg$c97;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parsegrayspaces();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parselinebreak();
          if (s5 as any !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            s8 = [];
            s9 = peg$parsedefault_line();
            if (s9 as any !== peg$FAILED) {
              while (s9 as any !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parsedefault_line();
              }
            } else {
              s8 = peg$FAILED;
            }
            if (s8 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 92) {
                s9 = peg$c97;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c98); }
              }
              if (s9 as any !== peg$FAILED) {
                s10 = peg$parsegrayspaces();
                if (s10 as any !== peg$FAILED) {
                  s11 = peg$parselinebreak();
                  if (s11 as any !== peg$FAILED) {
                    s8 = [s8, s9, s10, s11];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 as any === peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parsegrayspaces();
              if (s8 as any !== peg$FAILED) {
                s9 = peg$parseline_comment();
                if (s9 as any === peg$FAILED) {
                  s9 = null;
                }
                if (s9 as any !== peg$FAILED) {
                  s10 = peg$parselinebreak();
                  if (s10 as any !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            while (s7 as any !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = [];
              s9 = peg$parsedefault_line();
              if (s9 as any !== peg$FAILED) {
                while (s9 as any !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parsedefault_line();
                }
              } else {
                s8 = peg$FAILED;
              }
              if (s8 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 92) {
                  s9 = peg$c97;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c98); }
                }
                if (s9 as any !== peg$FAILED) {
                  s10 = peg$parsegrayspaces();
                  if (s10 as any !== peg$FAILED) {
                    s11 = peg$parselinebreak();
                    if (s11 as any !== peg$FAILED) {
                      s8 = [s8, s9, s10, s11];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 as any === peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parsegrayspaces();
                if (s8 as any !== peg$FAILED) {
                  s9 = peg$parseline_comment();
                  if (s9 as any === peg$FAILED) {
                    s9 = null;
                  }
                  if (s9 as any !== peg$FAILED) {
                    s10 = peg$parselinebreak();
                    if (s10 as any !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
            }
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parsedefault_line();
              if (s7 as any === peg$FAILED) {
                s7 = null;
              }
              if (s7 as any !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6, s7];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c99(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c96); }
    }

    return s0;
  }

  function peg$parsedefault_line(): any {
    let s0, s1, s2, s3;

    s0 = [];
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsegrayspace();
    if (s3 as any !== peg$FAILED) {
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsegrayspace();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseprg_call();
      if (s1 as any === peg$FAILED) {
        s1 = peg$parsevar();
        if (s1 as any === peg$FAILED) {
          s1 = peg$parsecommand();
          if (s1 as any === peg$FAILED) {
            s1 = peg$parselabel();
          }
        }
      }
    }
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parsegrayspace();
        if (s3 as any !== peg$FAILED) {
          while (s3 as any !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsegrayspace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 as any !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 as any === peg$FAILED) {
          s1 = peg$parseprg_call();
          if (s1 as any === peg$FAILED) {
            s1 = peg$parsevar();
            if (s1 as any === peg$FAILED) {
              s1 = peg$parsecommand();
              if (s1 as any === peg$FAILED) {
                s1 = peg$parselabel();
              }
            }
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetrash_line();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parselinebreak();
        if (s2 as any === peg$FAILED) {
          s2 = null;
        }
        if (s2 as any !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetrash_line(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parsestop_trashing();
    peg$silentFails--;
    if (s4 as any === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 as any !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s4 as any !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsestop_trashing();
        peg$silentFails--;
        if (s4 as any === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s4 as any !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsenon_delimiter();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenon_delimiter();
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c100();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevar(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsevar_name();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c101();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestop_trashing(): any {
    let s0;

    s0 = peg$parselinebreak();
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c97;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$parsegrayspace();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseprg_call();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parsecommand();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parsecontrol_block();
              if (s0 as any === peg$FAILED) {
                s0 = peg$parselabel();
                if (s0 as any === peg$FAILED) {
                  s0 = peg$parsevar();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecommand(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$parset_command();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c103.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c104); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsenumber();
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 as any !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c102); }
    }

    return s0;
  }

  function peg$parsen_command(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 78) {
      s1 = peg$c61;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsenon_neg_integer();
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c106;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c108(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c105); }
    }

    return s0;
  }

  function peg$parset_command(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 84) {
      s1 = peg$c110;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c111); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c112();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }

    return s0;
  }

  function peg$parseprg_call(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parsecycle_call();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parselocal_subprg_call();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseglobal_subprg_call();
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c113); }
    }

    return s0;
  }

  function peg$parselocal_subprg_call(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c115) {
      s1 = peg$c115;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsegap();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseprg_name();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c117(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c114); }
    }

    return s0;
  }

  function peg$parseglobal_subprg_call(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 76) {
      s1 = peg$c87;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c88); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsegap();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseprg_name();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c119(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c118); }
    }

    return s0;
  }

  function peg$parseprg_name(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseprg_name_string();
    if (s1 as any === peg$FAILED) {
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsenon_delimiter();
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsenon_delimiter();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c120(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseprg_name_string(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c121;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsenon_delimiter();
      if (s4 as any !== peg$FAILED) {
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsenon_delimiter();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c121;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c122); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c123(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecycle_call(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c115) {
      s2 = peg$c115;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }
    if (s2 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 76) {
        s2 = peg$c87;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parsegap();
      if (s3 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c125) {
          s4 = peg$c125;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c126); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parsegrayspaces();
          if (s5 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s6 = peg$c64;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parsegrayspaces();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$currPos;
                s10 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c127) {
                  s11 = peg$c127;
                  peg$currPos += 4;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c128); }
                }
                if (s11 as any !== peg$FAILED) {
                  s12 = peg$parsegrayspaces();
                  if (s12 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s13 = peg$c93;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c94); }
                    }
                    if (s13 as any !== peg$FAILED) {
                      s14 = peg$parsegrayspaces();
                      if (s14 as any !== peg$FAILED) {
                        s11 = [s11, s12, s13, s14];
                        s10 = s11;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
                if (s10 as any !== peg$FAILED) {
                  s9 = input.substring(s9, peg$currPos);
                } else {
                  s9 = s10;
                }
                if (s9 as any !== peg$FAILED) {
                  s10 = peg$parseprg_name();
                  if (s10 as any !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 as any !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parsebracket_multiline();
                  if (s10 as any === peg$FAILED) {
                    s10 = [];
                    if (peg$c129.test(input.charAt(peg$currPos))) {
                      s11 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c130); }
                    }
                    while (s11 as any !== peg$FAILED) {
                      s10.push(s11);
                      if (peg$c129.test(input.charAt(peg$currPos))) {
                        s11 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c130); }
                      }
                    }
                  }
                  if (s10 as any !== peg$FAILED) {
                    s9 = input.substring(s9, peg$currPos);
                  } else {
                    s9 = s10;
                  }
                  if (s9 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s10 = peg$c68;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c69); }
                    }
                    if (s10 as any !== peg$FAILED) {
                      s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c131(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c124); }
    }

    return s0;
  }

  function peg$parsesquared_bracket_block(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsebracket_multiline();
      if (s2 as any === peg$FAILED) {
        s2 = [];
        if (peg$c129.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c130); }
        }
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c129.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c130); }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c68;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c132); }
    }

    return s0;
  }

  function peg$parsebracket_multiline(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c133.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c134); }
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      if (peg$c133.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }
    }
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c97;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsewhitespaces();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parselinebreak();
          if (s4 as any !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = [];
            if (peg$c133.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c134); }
            }
            while (s8 as any !== peg$FAILED) {
              s7.push(s8);
              if (peg$c133.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c134); }
              }
            }
            if (s7 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 92) {
                s8 = peg$c97;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c98); }
              }
              if (s8 as any !== peg$FAILED) {
                s9 = peg$parsewhitespaces();
                if (s9 as any !== peg$FAILED) {
                  s10 = peg$parselinebreak();
                  if (s10 as any !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 as any === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsewhitespaces();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parseline_comment();
                if (s8 as any === peg$FAILED) {
                  s8 = null;
                }
                if (s8 as any !== peg$FAILED) {
                  s9 = peg$parselinebreak();
                  if (s9 as any !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            while (s6 as any !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = [];
              if (peg$c133.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c134); }
              }
              while (s8 as any !== peg$FAILED) {
                s7.push(s8);
                if (peg$c133.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c134); }
                }
              }
              if (s7 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 92) {
                  s8 = peg$c97;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c98); }
                }
                if (s8 as any !== peg$FAILED) {
                  s9 = peg$parsewhitespaces();
                  if (s9 as any !== peg$FAILED) {
                    s10 = peg$parselinebreak();
                    if (s10 as any !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 as any === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parsewhitespaces();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseline_comment();
                  if (s8 as any === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parselinebreak();
                    if (s9 as any !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = [];
              if (peg$c133.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c134); }
              }
              while (s7 as any !== peg$FAILED) {
                s6.push(s7);
                if (peg$c133.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c134); }
                }
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parselinebreak();
                if (s8 as any !== peg$FAILED) {
                  s9 = peg$parsewhitespaces();
                  if (s9 as any !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 as any === peg$FAILED) {
                  s7 = null;
                }
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c135();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselabel(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$c66.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        if (peg$c66.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c68;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c136(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegap(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseparen_comment();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseparen_comment();
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsewhitespace();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsegrayspaces();
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegrayspace(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parsewhitespace();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseparen_comment();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }

    return s0;
  }

  function peg$parsegrayspaces(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsegrayspace();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsegrayspace();
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c139();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }

    return s0;
  }

  function peg$parsegrayline(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    if (s2 as any === peg$FAILED) {
      s2 = peg$parsecomment();
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parsecomment();
      }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parselinebreak();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 as any === peg$FAILED) {
        s1 = peg$parsecomment();
      }
      if (s1 as any !== peg$FAILED) {
        while (s1 as any !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsewhitespace();
          if (s1 as any === peg$FAILED) {
            s1 = peg$parsecomment();
          }
        }
      } else {
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c140); }
    }

    return s0;
  }

  function peg$parsewhitespace(): any {
    let s0, s1;

    peg$silentFails++;
    if (peg$c142.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c143); }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c141); }
    }

    return s0;
  }

  function peg$parsewhitespaces(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c14();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c144); }
    }

    return s0;
  }

  function peg$parselinebreak(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c146) {
      s0 = peg$c146;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c147); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 13) {
        s0 = peg$c148;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s0 = peg$c150;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c145); }
    }

    return s0;
  }

  function peg$parsenon_linebreak(): any {
    let s0, s1;

    peg$silentFails++;
    if (peg$c153.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c154); }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c152); }
    }

    return s0;
  }

  function peg$parseinteger(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c156;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c157); }
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsenon_neg_integer();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c155); }
    }

    return s0;
  }

  function peg$parsenon_neg_integer(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsedigit();
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsedigit();
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c158); }
    }

    return s0;
  }

  function peg$parsenumber(): any {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseinteger();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c91;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parsenon_neg_integer();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c159); }
    }

    return s0;
  }

  function peg$parsename(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c161.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c162); }
    }
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        if (peg$c161.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c162); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c160); }
    }

    return s0;
  }

  function peg$parsedigit(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c164.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c165); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c14();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c163); }
    }

    return s0;
  }

  function peg$parsenon_delimiter(): any {
    let s0, s1;

    peg$silentFails++;
    if (peg$c167.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c168); }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c166); }
    }

    return s0;
  }

  function peg$parsestring(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c121;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c170.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        if (peg$c170.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c171); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c121;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c122); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c14();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c169); }
    }

    return s0;
  }

  function peg$parseline_end(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenon_linebreak();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsenon_linebreak();
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parselinebreak();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  	const numberableLinesUnsorted = new Set();
    let mainPrg = null;


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface ParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: ParseOptions) => any;
export const parse: ParseFunction = peg$parse;

